/*!
 * jQuery MsgBox - for jQuery 1.3+
 * http://codecanyon.net/item/jquery-msgbox/92626?ref=aeroalquimia
 *
 * Copyright 2010, Eduardo Daniel Sada
 * You need to buy a license if you want use this script.
 * http://codecanyon.net/wiki/buying/howto-buying/licensing/
 *
 * Version: 1.3.2 (Jun 21 2011)
 *
 * Includes jQuery Easing v1.1.2
 * http://gsgd.co.uk/sandbox/jquery.easIng.php
 * Copyright (c) 2007 George Smith
 * Released under the MIT License.
 */

(function (e) {
    var t = jQuery.browser.msie && parseInt(jQuery.browser.version, 10) < 7 && parseInt(jQuery.browser.version, 10) > 4;
    if (e.proxy === undefined) {
        e.extend({
            proxy: function (e, t) {
                if (e) {
                    proxy = function () {
                        return e.apply(t || this, arguments)
                    }
                }
                return proxy
            }
        })
    }
    e.extend(jQuery.easing, {
        easeOutBack: function (e, t, n, r, i, s) {
            if (s == undefined) s = 1.70158;
            return r * ((t = t / i - 1) * t * ((s + 1) * t + s) + 1) + n
        }
    });
    e.extend(e.expr[":"], {
        value: function (t) {
            return e(t).val()
        }
    });
    e.extend({
        MsgBoxObject: {
            defaults: {
                name: "jquery-msgbox",
                zIndex: 1e4,
                width: 420,
                height: "auto",
                background: "#FFFFFF",
                modal: true,
                overlay: {
                    "background-color": "#000000",
                    opacity: .5
                },
                showDuration: 200,
                closeDuration: 100,
                moveDuration: 500,
                shake: {
                    distance: 10,
                    duration: 100,
                    transition: "easeOutBack",
                    loops: 2
                },
                form: {
                    active: false,
                    action: "#",
                    method: "post"
                },
                emergefrom: "top"
            },
            options: {},
            esqueleto: {
                msgbox: [],
                wrapper: [],
                form: [],
                buttons: [],
                inputs: []
            },
            visible: false,
            i: 0,
            animation: false,
            config: function (t) {
                this.options = e.extend(true, this.options, t);
                this.overlay.element.css(this.options.overlay);
                this.overlay.options.hideOnClick = !this.options.modal;
                this.esqueleto.msgbox.css({
                    width: this.options.width,
                    height: this.options.height,
                    "background-color": this.options.background
                });
                this.moveBox()
            },
            overlay: {
                create: function (t) {
                    this.options = t;
                    this.element = e('<div id="' + (new Date).getTime() + '"></div>');
                    this.element.css(e.extend({}, {
                        position: "fixed",
                        top: 0,
                        left: 0,
                        opacity: 0,
                        display: "none",
                        "z-index": this.options.zIndex
                    }, this.options.style));
                    this.element.click(e.proxy(function (t) {
                        if (this.options.hideOnClick) {
                            if (e.isFunction(this.options.callback)) {
                                this.options.callback()
                            } else {
                                this.hide()
                            }
                        }
                        t.preventDefault()
                    }, this));
                    this.hidden = true;
                    this.inject();
                    return this
                },
                inject: function () {
                    this.target = e(document.body);
                    this.target.append(this.element);
                    if (t) {
                        this.element.css({
                            position: "absolute"
                        });
                        var n = parseInt(this.element.css("zIndex"));
                        if (!n) {
                            n = 1;
                            var r = this.element.css("position");
                            if (r == "static" || !r) {
                                this.element.css({
                                    position: "relative"
                                })
                            }
                            this.element.css({
                                zIndex: n
                            })
                        }
                        n = !! (this.options.zIndex || this.options.zIndex === 0) && n > this.options.zIndex ? this.options.zIndex : n - 1;
                        if (n < 0) {
                            n = 1
                        }
                        this.shim = e('<iframe id="IF_' + (new Date).getTime() + '" scrolling="no" frameborder=0 src=""></div>');
                        this.shim.css({
                            zIndex: n,
                            position: "absolute",
                            top: 0,
                            left: 0,
                            border: "none",
                            width: 0,
                            height: 0,
                            opacity: 0
                        });
                        this.shim.insertAfter(this.element);
                        e("html, body").css({
                            height: "100%",
                            width: "100%",
                            "margin-left": 0,
                            "margin-right": 0
                        })
                    }
                },
                resize: function (t, n) {
                    this.element.css({
                        height: 0,
                        width: 0
                    });
                    if (this.shim) this.shim.css({
                        height: 0,
                        width: 0
                    });
                    var r = {
                        x: e(document).width(),
                        y: e(document).height()
                    };
                    this.element.css({
                        width: "100%",
                        height: n ? n : r.y
                    });
                    if (this.shim) {
                        this.shim.css({
                            height: 0,
                            width: 0
                        });
                        this.shim.css({
                            position: "absolute",
                            left: 0,
                            top: 0,
                            width: this.element.width(),
                            height: n ? n : r.y
                        })
                    }
                    return this
                },
                show: function () {
                    if (!this.hidden) return this;
                    if (this.transition) this.transition.stop();
                    this.target.bind("resize", e.proxy(this.resize, this));
                    this.resize();
                    if (this.shim) this.shim.css({
                        display: "block"
                    });
                    this.hidden = false;
                    this.transition = this.element.fadeIn(this.options.showDuration, e.proxy(function () {
                        this.element.trigger("show")
                    }, this));
                    return this
                },
                hide: function () {
                    if (this.hidden) return this;
                    if (this.transition) this.transition.stop();
                    this.target.unbind("resize");
                    if (this.shim) this.shim.css({
                        display: "none"
                    });
                    this.hidden = true;
                    this.transition = this.element.fadeOut(this.options.closeDuration, e.proxy(function () {
                        this.element.trigger("hide");
                        this.element.css({
                            height: 0,
                            width: 0
                        })
                    }, this));
                    return this
                }
            },
            create: function () {
                this.options = e.extend(true, this.defaults, this.options);
                this.overlay.create({
                    style: this.options.overlay,
                    hideOnClick: !this.options.modal,
                    zIndex: this.options.zIndex - 1,
                    showDuration: this.options.showDuration,
                    closeDuration: this.options.closeDuration
                });
                this.esqueleto.msgbox = e('<div class="' + this.options.name + '"></div>');
                this.esqueleto.msgbox.css({
                    display: "none",
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: this.options.width,
                    height: this.options.height,
                    "z-index": this.options.zIndex,
                    "word-wrap": "break-word",
                    "-moz-box-shadow": "0 0 15px rgba(0, 0, 0, 0.5)",
                    "-webkit-box-shadow": "0 0 15px rgba(0, 0, 0, 0.5)",
                    "box-shadow": "0 0 15px rgba(0, 0, 0, 0.5)",
                    "-moz-border-radius": "6px",
                    "-webkit-border-radius": "6px",
                    "border-radius": "6px",
                    "background-color": this.options.background
                });
                this.esqueleto.wrapper = e('<div class="' + this.options.name + '-wrapper"></div>');
                this.esqueleto.msgbox.append(this.esqueleto.wrapper);
                this.esqueleto.form = e('<form action="' + this.options.formaction + '" method="post"></form>');
                this.esqueleto.wrapper.append(this.esqueleto.form);
                this.esqueleto.wrapper.css({
                    height: t ? 80 : "auto",
                    "min-height": 80,
                    zoom: 1
                });
                e("body").append(this.esqueleto.msgbox);
                this.addevents();
                return this.esqueleto.msgbox
            },
            addevents: function () {
                e(window).bind("resize", e.proxy(function () {
                    if (this.visible) {
                        this.overlay.resize();
                        this.moveBox()
                    }
                }, this));
                e(window).bind("scroll", e.proxy(function () {
                    if (this.visible) {
                        this.moveBox()
                    }
                }, this));
                this.esqueleto.msgbox.bind("keydown", e.proxy(function (e) {
                    if (e.keyCode == 27) {
                        this.close(false)
                    }
                }, this));
                this.esqueleto.form.bind("submit", e.proxy(function (t) {
                    e("input[type=submit]:first, button[type=submit]:first, button:first", this.esqueleto.form).trigger("click");
                    if (!options.form.active) {
                        t.preventDefault()
                    }
                }, this));
                this.overlay.element.bind("show", e.proxy(function () {
                    e(this).triggerHandler("show")
                }, this));
                this.overlay.element.bind("hide", e.proxy(function () {
                    e(this).triggerHandler("close")
                }, this))
            },
            show: function (t, n, r) {
                var i = ["alert", "info", "error", "prompt", "confirm"];
                this.esqueleto.msgbox.queue(this.options.name, e.proxy(function (s) {
                    n = e.extend(true, {
                        type: "alert",
                        form: {
                            active: false
                        }
                    }, n || {});
                    if (typeof n.buttons === "undefined") {
                        if (n.type == "confirm" || n.type == "prompt") {
                            var o = [{
                                type: "submit",
                                value: "OK"
                            }, {
                                type: "cancel",
                                value: "Cancel"
                            }
                            ]
                        } else {
                            var o = [{
                                type: "submit",
                                value: "OK"
                            }
                            ]
                        }
                    } else {
                        var o = n.buttons
                    } if (typeof n.inputs === "undefined" && n.type == "prompt") {
                        var u = [{
                            type: "text",
                            name: "prompt",
                            value: ""
                        }
                        ]
                    } else {
                        var u = n.inputs
                    }
                    this.callback = e.isFunction(r) ? r : function (e) {};
                    if (typeof u !== "undefined") {
                        this.esqueleto.inputs = e('<div class="' + this.options.name + '-inputs"></div>');
                        this.esqueleto.form.append(this.esqueleto.inputs);
                        e.each(u, e.proxy(function (t, n) {
                            if (n.type == "checkbox") {
                                iLabel = n.label ? '<label class="' + this.options.name + '-label">' : "";
                                fLabel = n.label ? n.label + "</label>" : "";
                                n.value = n.value === undefined ? "1" : n.value;
                                iName = n.name === undefined ? this.options.name + "-label-" + t : n.name;
                                this.esqueleto.inputs.append(e(iLabel + '<input type="' + n.type + '" style="display:inline; width:auto;" name="' + iName + '" value="' + n.value + '" autocomplete="off"/> ' + fLabel))
                            } else {
                                iLabel = n.label ? '<label class="' + this.options.name + '-label">' + n.label : "";
                                fLabel = n.label ? "</label>" : "";
                                n.value = n.value === undefined ? "" : n.value;
                                iRequired = n.required === undefined || n.required == false ? "" : 'required="true"';
                                iName = n.name === undefined ? this.options.name + "-label-" + t : n.name;
                                this.esqueleto.inputs.append(e(iLabel + '<input type="' + n.type + '" name="' + iName + '" value="' + n.value + '" autocomplete="off" ' + iRequired + "/>" + fLabel))
                            }
                        }, this))
                    }
                    this.esqueleto.buttons = e('<div class="' + this.options.name + '-buttons"></div>');
                    this.esqueleto.form.append(this.esqueleto.buttons);
                    if (n.form.active) {
                        this.esqueleto.form.attr("action", n.form.action === undefined ? "#" : n.form.action);
                        this.esqueleto.form.attr("method", n.form.method === undefined ? "post" : n.form.method);
                        this.options.form.active = true
                    } else {
                        this.esqueleto.form.attr("action", "#");
                        this.esqueleto.form.attr("method", "post");
                        this.options.form.active = false
                    } if (n.type != "prompt") {
                        e.each(o, e.proxy(function (t, n) {
                            if (n.type == "submit") {
                                this.esqueleto.buttons.append(e('<button type="submit" class="btn">' + n.value + "</button>").bind("click", e.proxy(function (e) {
                                    this.close(n.value);
                                    e.preventDefault()
                                }, this)))
                            } else if (n.type == "cancel") {
                                this.esqueleto.buttons.append(e('<button type="button" class="btn">' + n.value + "</button>").bind("click", e.proxy(function (e) {
                                    this.close(false);
                                    e.preventDefault()
                                }, this)))
                            }
                        }, this))
                    } else if (n.type == "prompt") {
                        e.each(o, e.proxy(function (t, n) {
                            if (n.type == "submit") {
                                this.esqueleto.buttons.append(e('<button type="submit" class="btn">' + n.value + "</button>").bind("click", e.proxy(function (t) {
                                    if (e('input[required="true"]:not(:value)').length > 0) {
                                        e('input[required="true"]:not(:value):first').focus();
                                        this.shake()
                                    } else if (this.options.form.active) {
                                        return true
                                    } else {
                                        this.close(this.toArguments(e("input", this.esqueleto.inputs)))
                                    }
                                    t.preventDefault()
                                }, this)))
                            } else if (n.type == "cancel") {
                                this.esqueleto.buttons.append(e('<button type="button" class="btn">' + n.value + "</button>").bind("click", e.proxy(function (e) {
                                    this.close(false);
                                    e.preventDefault()
                                }, this)))
                            }
                        }, this))
                    }
                    this.esqueleto.form.prepend(t);
                    e.each(i, e.proxy(function (e, t) {
                        this.esqueleto.wrapper.removeClass(this.options.name + "-" + t)
                    }, this));
                    this.esqueleto.wrapper.addClass(this.options.name + "-" + n.type);
                    this.moveBox();
                    this.visible = true;
                    this.overlay.show();
                    this.esqueleto.msgbox.css({
                        display: "block",
                        left: (e(document).width() - this.options.width) / 2
                    });
                    this.moveBox();
                    setTimeout(e.proxy(function () {
                        var t = e("input, button", this.esqueleto.msgbox);
                        if (t.length) {
                            t.get(0).focus()
                        }
                    }, this), this.options.moveDuration)
                }, this));
                this.i++;
                if (this.i == 1) {
                    this.esqueleto.msgbox.dequeue(this.options.name)
                }
            },
            toArguments: function (t) {
                return e.map(t, function (t) {
                    return e(t).val()
                })
            },
            moveBox: function () {
                var t = {
                    x: e(window).width(),
                    y: e(window).height()
                };
                var n = {
                    x: e(window).scrollLeft(),
                    y: e(window).scrollTop()
                };
                var r = this.esqueleto.msgbox.outerHeight();
                var i = 0;
                var s = 0;
                i = n.x + (t.x - this.options.width) / 2;
                if (this.options.emergefrom == "bottom") {
                    s = n.y + t.y + 80
                } else {
                    s = n.y - r - 80
                } if (this.visible) {
                    if (this.animation) {
                        this.animation.stop
                    }
                    this.animation = this.esqueleto.msgbox.animate({
                        left: i,
                        top: n.y + (t.y - r) / 2
                    }, {
                        duration: this.options.moveDuration,
                        queue: false,
                        easing: "easeOutBack"
                    })
                } else {
                    this.esqueleto.msgbox.css({
                        top: s,
                        left: i
                    })
                }
            },
            close: function (t) {
                this.esqueleto.msgbox.css({
                    display: "none",
                    top: 0
                });
                this.visible = false;
                if (e.isFunction(this.callback)) {
                    this.callback.apply(this, e.makeArray(t))
                }
                setTimeout(e.proxy(function () {
                    this.i--;
                    this.esqueleto.msgbox.dequeue(this.options.name)
                }, this), this.options.closeDuration);
                if (this.i == 1) {
                    this.overlay.hide()
                }
                this.moveBox();
                this.esqueleto.form.empty()
            },
            shake: function () {
                var e = this.options.shake.distance;
                var t = this.options.shake.duration;
                var n = this.options.shake.transition;
                var r = this.options.shake.loops;
                var s = this.esqueleto.msgbox.position().left;
                var o = this.esqueleto.msgbox;
                for (i = 0; i < r; i++) {
                    o.animate({
                        left: s + e
                    }, t, n);
                    o.animate({
                        left: s - e
                    }, t, n)
                }
                o.animate({
                    left: s + e
                }, t, n);
                o.animate({
                    left: s
                }, t, n)
            }
        },
        msgbox: function (t, n, r) {
            if (typeof t == "object") {
                e.MsgBoxObject.config(t)
            } else {
                return e.MsgBoxObject.show(t, n, r)
            }
        }
    });
    e(function () {
        if (parseFloat(e.fn.jquery) > 1.2) {
            e.MsgBoxObject.create()
        } else {
            throw "The jQuery version that was loaded is too old. MsgBox requires jQuery 1.3+"
        }
    })
})(jQuery);